[{"content":"","date":"Sep 1, 2022","permalink":"/github.io/gobook/categories/beginner/","section":"Categories","summary":"","title":"Beginner"},{"content":"Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this\n","date":"Sep 1, 2022","permalink":"/github.io/gobook/blog/","section":"Blog","summary":"Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this","title":"Blog"},{"content":"Golang Categories Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this one also support custom content to be displayed above the list of terms.\nThis area could be used to add some extra decriptive text to each taxonomy.\n","date":"Sep 1, 2022","permalink":"/github.io/gobook/categories/","section":"Categories","summary":"Golang Categories Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this one also support custom content to be displayed above the list of terms.\nThis area could be used to add some extra decriptive text to each taxonomy.","title":"Categories"},{"content":"","date":"Sep 1, 2022","permalink":"/github.io/gobook/tags/go/","section":"tags","summary":"","title":"Go"},{"content":"After you finish this article you will start playing with arrays like pawns\nGrouping similar data, a collection of homogenuous data, is something pretty familiar in code, a list of strings or list of integers, or other types of data, Go has many ways to doing just that, Slices and Arrays Lets take a look at arrays:\nArrays # Arrays in Go, are similar to arrays in C. Arrays in Go, are the simpler onces, but with a number of gotchas,\nArrays size has to be defined at declaration time Its impossible to resize the array. If you pass an array to a function, you are passing a copy of the array, as result, all changes you make are only within the said function. If you have a problem with any of this reasons, then the Good news, slices are here.\nSlices # Slices in Go, are much more powerful, specially with how dynamic they are, you can grow or shrink slices however you want.\nNote that Slices are actually Arrays, each element is an array with a header, Go uses SliceHeader under the hood. where it does use a pointer to the underlying data.\ntype SliceHeader struct { Data uintptr Len int Cap int } Here the advantage is passing the slice header is so fast, Go dosent need to make a copy of the slice and its elements. Just the slice header. To create a slice we can use make() or like a slice literal []int{}\nWhen to use make, and when []int or []string (aka slice literal) # When you want to initialize it at the same time of creation, then using a slice literal is better []int{1,2,3} If you dont want to initialize a slice, use make() its faster. If you want to create a slice with space for a number of elements then you can use make([]string, 3) a slice of strings, holding 3 elements. all elements are an empty string, a zero value of string \u0026quot;\u0026quot;. Then after slice creation you might want to either fill spaces that has no element (update), or just add new elements to the slice.\nTo add more elements to a slice you do names = append(names, \u0026quot;John\u0026quot;, \u0026quot;Jane\u0026quot;) If you have an element with zero value, or any other value, you can just names[i] = \u0026quot;Mohamed\u0026quot; where the i is the index element of the slice. Go slices: cap capacity and length len # To check a slice cap, for capacity which means how many elements it has, including the ones with zero value, that you can use theSlice[i] = \u0026quot;somevalue\u0026quot;, without allocating more memory. or len which is just for the length of the slice. The capacity doubles whenever we attempt to add an element that is bigger than current capacity.\nSetting the correct capacity of a slice upfront, will make your code faster\nLet\u0026rsquo;s play # // create an empty slice var names := []string{} // tthis prints out an empty slice, len and capacity both 0 //[] 0 0 fmt.Println(names, len(names), cap(names)) // Add elements names = append(names, \u0026#34;John\u0026#34;) names = append(names, \u0026#34;Jane\u0026#34;) names = append(names, \u0026#34;Joe\u0026#34;, \u0026#34;Jean\u0026#34;) // tthis prints out a slice [\u0026#34;John\u0026#34;, \u0026#34;Jane\u0026#34;, \u0026#34;Joe\u0026#34;, \u0026#34;Jean\u0026#34;] // length is 4, capacity is 4. // [John Jane Joe Jean] 4 4 fmt.Println(names, len(names), cap(names)) Lets create a slice of 3 elements.\nt := make([]int, 3) t[0] = 0 t[1] = 1 t[2] = 2 //[0 1 2] 3 3 fmt.Println(t, len(t), cap(t)) panic: runtime error: index out of range [3] with length 3 # t := make([]int, 3) t[0] = 0 t[1] = 1 t[2] = 2 //[0 1 2] 3 3 fmt.Println(t, len(t), cap(t)) // This line here causes a panic // panic: runtime error: index out of range [3] with length 3 t[3] = 3 append to a slice # t := make([]int, 3) t[0] = 0 t[1] = 1 t[2] = 2 //[0 1 2] 3 3 fmt.Println(t, len(t), cap(t)) // This line here causes a panic // panic: runtime error: index out of range [3] with length 3 // t[3] = 3 t = append(t, 3) // This returns the slice with length of 4, and capacity of 6 (double the previous one 3) // [0 1 2 3] 4 6 fmt.Println(t, len(t), cap(t)) append to a slice ","date":"Sep 1, 2022","permalink":"/github.io/gobook/golang-arrays-and-slices/","section":"Blog","summary":"\u003cp\u003eAfter you finish this article you will start playing with arrays like pawns\u003c/p\u003e","title":"Golang arrays and slices"},{"content":"Golang bad file descriptor\nGolang bad file descriptor Golang updating a file # When you use Golang, Its really a good idea, playing with files is actually fun, however this popular error, occurs when you want to update or append to a file, without deleteing the text written already.\nGolang creating a file # This is only possible if you want to write to the file for the first time.\nf, err := os.Create(fileName) if err != nil { return err } _, err = f.WriteString(\u0026#34;text\u0026#34;) if err != nil { return err } Golang updating a file # This is how you open a file, and append to it. f, err := os.OpenFile(fileName, os.O_CREATE|os.O_WRONLY|os.O_APPEND, os.ModePerm) // the args: os.O_CREATE|os.O_WRONLY|os.O_APPEND, os.ModePerm //f, err := os.Create(fileName) if err != nil { return err } _, err = f.WriteString(\u0026#34;text\u0026#34;) if err != nil { return err }\nfor more inforamtions please referr to this stackoverflow link.\n","date":"Sep 1, 2022","permalink":"/github.io/gobook/golang-bad-file-descriptor-how-to-append-to-a-file/","section":"Blog","summary":"\u003cp\u003eGolang bad file descriptor\u003c/p\u003e","title":"Golang bad file descriptor (how to append to a file)"},{"content":" Congo brings your content to life. üòç This section contains some demo pages that show how Congo renders different types of content. You can also see an example taxonomy listing page.\nSidenote: This page is just a standard Congo article listing and Hugo has been configured to generate a samples content type and display article summaries.\n","date":"Sep 1, 2022","permalink":"/github.io/gobook/","section":"Golang book","summary":"Congo brings your content to life. üòç This section contains some demo pages that show how Congo renders different types of content. You can also see an example taxonomy listing page.\nSidenote: This page is just a standard Congo article listing and Hugo has been configured to generate a samples content type and display article summaries.","title":"Golang book"},{"content":"Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this one also support custom content to be displayed above the list of terms.\nThis area could be used to add some extra decriptive text to each taxonomy.\n","date":"Sep 1, 2022","permalink":"/github.io/gobook/tags/","section":"tags","summary":"Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this one also support custom content to be displayed above the list of terms.\nThis area could be used to add some extra decriptive text to each taxonomy.","title":"tags"},{"content":"","date":"Aug 23, 2022","permalink":"/github.io/gobook/tags/golang/","section":"tags","summary":"","title":"Golang"},{"content":"Underscore _ demisified in Go.\nBlank identifier # The blank identifier is represented by the underscore character _. It serves as an anonymous placeholder instead of a regular (non-blank) identifier and has special meaning in declarations, as an operand, and in assignment statements.\nOfficial Docs:\nThe Go Programming Language Specification Effective Go Why we use it? # As you know, in Golang, every should be used in its declaration scope, But what if you have a variable that is not used, and also irrelevant to you? The compiler will throw an exception, so to Example\nIts also common if you use a function that returns more than one value, and you want to ignore one of the values (commonly to test things out you ignore the error) Underscore will be your friend, and if you want more details.\nThe blank identifier may be used whenever syntax requires a variable name but program logic does not, for instance to discard an unwanted loop index when we require only the element value.\nCopywrite The Go Programming Language (Addison-Wesley Professional Computing Series) Common use case # If you see an import statement with underscore, Jon Explains it here Why we import SQL drivers as the blank identifier\n","date":"Aug 23, 2022","permalink":"/github.io/gobook/blank-identifier/","section":"Blog","summary":"\u003cp\u003eUnderscore _ demisified in Go.\u003c/p\u003e","title":"What is _ (underscore) in Go?"},{"content":"An algorithm is a plan, a set of step-by-step instructions to resolve a problem. And there is two ways to represent that.\nPseudocode # A method of writing up a set of instructions for a computer program using plain English. This is a good way of planning a program before coding.\nPseudocode is a kind of structured english for describing algorithms. It allows the designer to focus on the logic of the algorithm without being distracted by details of language syntax. At the same time, the pseudocode needs to be complete. It describe the entire logic of the algorithm so that implementation becomes a rote mechanical task of translating line by line into source code. In general the vocabulary used in the pseudocode should be the vocabulary of the problem domain, not of the implementation domain. The pseudocode is a narrative for someone who knows the requirements (problem domain) and is trying to learn how the solution is organized. E.g.,\nExtract the next word from the line (good) set word to get next token (poor) Append the file extension to the name (good) name = name + extension (poor)\nFOR all the characters in the name (good) FOR character = first to last (ok)\nSource\nFlow chart # A diagram that shows a process, made up of boxes representing steps, decision, inputs and outputs. of an algorithm\nFlowchart is the second type of representing an algorithm\n","date":"Aug 22, 2022","permalink":"/github.io/gobook/algorithms/","section":"Blog","summary":"\u003cp\u003eAn algorithm is a plan, a set of step-by-step instructions to resolve a problem. And there is two ways to represent that.\u003c/p\u003e","title":"The 2 Algorithms representations"},{"content":"","date":"Aug 16, 2022","permalink":"/github.io/gobook/tags/beginner/","section":"tags","summary":"","title":"Beginner"},{"content":"","date":"Aug 16, 2022","permalink":"/github.io/gobook/categories/golang/","section":"Categories","summary":"","title":"Golang"},{"content":"Go, is very productive, lets build a web server in 5 minutes. part 3\nIntro # some app #","date":"Aug 16, 2022","permalink":"/github.io/gobook/web-appolang-http-server-part-3riables-aaa/","section":"Blog","summary":"\u003cp\u003eGo, is very productive, lets build a web server in 5 minutes. part 3\u003c/p\u003e","title":"Golang Http server part 3"},{"content":"Go, is very productive, lets build a web server in 5 minutes.\nGolang web app # package main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; ) const PORT = \u0026#34;:9876\u0026#34; func main() { fmt.Printf(\u0026#34;starting the server: %v\\n\u0026#34;, PORT) HomeRoute := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \u0026#34;hello Web\u0026#34;) }) log.Fatal(http.ListenAndServe(PORT, HomeRoute)) } Visit the url, on the port number, and you will print out hello Web\nVisit url localhost:9876\nhello Web\nappend to a slice Theory # Golang is packages has one called net/http it cnotains a few ways of creating the HTTP server. To create a web server you need 2 things.\nThe handler function, it compromises the route and the controller, You can simply implement the Handler interface. in a method. they act like handlers or controllers in other languages or frameworks. so it has a ResponseWriter and pointer to the HttpRequest. The server itself is created in the ListenAndServe, on the given address. This method requires the Handler. you provided. ","date":"Aug 16, 2022","permalink":"/github.io/gobook/simple-http-server/","section":"Blog","summary":"\u003cp\u003eGo, is very productive, lets build a web server in 5 minutes.\u003c/p\u003e","title":"Simple Http server"},{"content":"Lets build a basic web application in Go. # ","date":"Aug 16, 2022","permalink":"/github.io/gobook/blog/basic-web-app/","section":"Blog","summary":"Lets build a basic web application in Go. # ","title":"Web App"},{"content":"","date":"Aug 16, 2022","permalink":"/github.io/gobook/categories/webapp/","section":"Categories","summary":"","title":"WebApp"},{"content":"a List of all Go books\nGithub Golang Github Dariubs Cookbooks # Github Spaceship Go Github Golang-book Mastering Go - Third Edition Go Resources Introducing Go An Introduction to Programming in Go Syntax Link Year Pages Author Header Title 2022 228 Me Go Cookbook book 2023 . Sau Sheong Chang 100 Go Mistakes and How to Avoid Them book 2022 384 Teiva Harsanyi 100 Go Mistakes and How to Avoid Them book 2022 384 Teiva Harsanyi Go Programming Cookbook - Second Edition 100 Go Mistakes and How to Avoid Them Released February 2018 Go Standard Library Cookbook Go Standard Library Cookbook Go: Design Patterns for Real-World Projects ","date":"Jan 25, 2022","permalink":"/github.io/gobook/resources/go-books/","section":"Resources","summary":"\u003cp\u003ea List of all Go books\u003c/p\u003e","title":"Go Books"},{"content":"Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this one also support custom content to be displayed above the list of terms.\nThis area could be used to add some extra decriptive text to each taxonomy.\n","date":"Jan 25, 2022","permalink":"/github.io/gobook/resources/","section":"Resources","summary":"Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this one also support custom content to be displayed above the list of terms.\nThis area could be used to add some extra decriptive text to each taxonomy.","title":"Resources"},{"content":"This is resources will take you from not knowing what coding is, to becoming proficient in Go\nRoadmap # Step by step guide to becoming a Go developer in 2022 Easy to understand explanation of Big-O notation without any fancy terms Udemy courses # Trevor Sawler\nLearn Go for Beginners Crash Course (Golang) Building Modern Web Applications with Go (Golang) Building Web Applications with Go - Intermediate Level Building a module in Go (Golang) Let\u0026rsquo;s Build a Go version of Laravel Let\u0026rsquo;s Build a Go version of Laravel: Part Two Working with Concurrency in Go (Golang) Building GUI Applications with Fyne and Go (Golang) Working with React and Go (Golang) Working with Vue 3 and Go (Golang) Working with Microservices in Go (Golang) Working with WebSockets in Go (Golang) Todd McLeod\nWeb Development w/ Google‚Äôs Go (golang) Programming Language Web Architecture With Golang - Google\u0026rsquo;s Go Language Web Authentication With Golang - Google\u0026rsquo;s Go Language Collaboration and Crawling W/ Golang - Google\u0026rsquo;s Go Language Learn How To Code: Google\u0026rsquo;s Go (golang) Programming Language Federico Leon\nIntroduction to industry REST microservices in Golang (Go) How to design \u0026amp; develop REST microservices in Golang (Go) Learn How To Code: Google\u0026rsquo;s Go (golang) Programming Language gRPC [Golang] Master Class: Build Modern API \u0026amp; Microservices\nGo: The Complete Developer\u0026rsquo;s Guide (Golang)\nGo Bootcamp: Master Golang with 1000+ Exercises and Projects\nMembership courses # Build your own X Go Programming (Golang): The Complete Developer\u0026rsquo;s Guide TutorialEdge Learn Web Programming in Go by Examples Creating a reddit clone in Go OTP courses # Jon Calhoun Web Development with Go Test with Go Youtube Courses # Traversy Media: Go / Golang Crash Course DerekBanas: Go Programming FreeCodeCamp Michael Van Sickle Learn Go Programming - Golang Tutorial for Beginners More resouces # https://github.com/codecrafters-io/build-your-own-x https://github.com/florinpop17/app-ideas\nCurated list of project-based tutorials Algorithms and data structures implemented in JavaScript with explanations and links to further readings All Algorithms implemented in Python üéì Path to a free self-taught education in Computer Science! üë®‚Äçüíª A complete computer science study plan to become a software engineer. üìö Freely available programming books üõ£Ô∏è Roadmap to becoming a developer in 2022 üíØ Curated coding interview preparation materials for busy software engineers A collective list of free APIs freeCodeCamp.org\u0026rsquo;s open-source codebase and curriculum. Learn to code for free. üòé Awesome lists about all kinds of interesting topics Learn how to design large-scale systems. Prep for the system design interview. Includes Anki flashcards. Short JavaScript code snippets for all your development needs Edit this page on GitHub\n","date":"Jan 25, 2022","permalink":"/github.io/gobook/resources/resources-to-learn-go/","section":"Resources","summary":"\u003cp\u003eThis is resources will take you from not knowing what coding is, to becoming proficient in Go\u003c/p\u003e","title":"Resources to learn go"},{"content":"You want to know what others built using the very Go?\nSources # Docker Compose Kubernetes CockroachDB BadgerDB FerretDB NSQ NATS Centrifugo PhotoPrism Caddy Edit this page on GitHub\n","date":"Jan 25, 2022","permalink":"/github.io/gobook/madewithGo/","section":"Resources","summary":"You want to know what others built using the very Go?\nSources # Docker Compose Kubernetes CockroachDB BadgerDB FerretDB NSQ NATS Centrifugo PhotoPrism Caddy Edit this page on GitHub","title":"Made With Go"},{"content":"This tools will show you how awesome is the Go ecosystem.\nSources # - [Calculate cyclomatic complexities of functions in Go source code.](https://github.com/fzipp/gocyclo) - [Automatically generate Go test boilerplate from your source code](https://github.com/cweill/gotests) - [Go weekly newsletter](https://golangweekly.com/) Edit this page on GitHub\n","date":"Jan 25, 2022","permalink":"/github.io/gobook/resources/go-tools/","section":"Resources","summary":"This tools will show you how awesome is the Go ecosystem.\nSources # - [Calculate cyclomatic complexities of functions in Go source code.](https://github.com/fzipp/gocyclo) - [Automatically generate Go test boilerplate from your source code](https://github.com/cweill/gotests) - [Go weekly newsletter](https://golangweekly.com/) Edit this page on GitHub","title":"Tools in The Go ecosystem"},{"content":"An algorithm is a plan, a set of step-by-step instructions to resolve a problem. And there is two ways to represent that.\n","date":"Jan 1, 1","permalink":"/github.io/gobook/golang-create-read-update-delete-file/","section":"Blog","summary":"\u003cp\u003eAn algorithm is a plan, a set of step-by-step instructions to resolve a problem. And there is two ways to represent that.\u003c/p\u003e","title":"Golang create read update delete file"}]