[{"content":"","date":"23 August 2022","permalink":"/github.io/gobook/categories/beginner/","section":"Categories","summary":"","title":"Beginner"},{"content":"Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this\n","date":"23 August 2022","permalink":"/github.io/gobook/blog/","section":"Blog","summary":"Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up.","title":"Blog"},{"content":"Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this one also support custom content to be displayed above the list of terms.\nThis area could be used to add some extra decriptive text to each taxonomy.\n","date":"23 August 2022","permalink":"/github.io/gobook/categories/","section":"Categories","summary":"Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up.","title":"Categories"},{"content":" Congo brings your content to life. üòç This section contains some demo pages that show how Congo renders different types of content. You can also see an example taxonomy listing page.\nSidenote: This page is just a standard Congo article listing and Hugo has been configured to generate a samples content type and display article summaries.\n","date":"23 August 2022","permalink":"/github.io/gobook/","section":"Content Samples","summary":"Congo brings your content to life.","title":"Content Samples"},{"content":"","date":"23 August 2022","permalink":"/github.io/gobook/tags/golang/","section":"tags","summary":"","title":"Golang"},{"content":"Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this one also support custom content to be displayed above the list of terms.\nThis area could be used to add some extra decriptive text to each taxonomy.\n","date":"23 August 2022","permalink":"/github.io/gobook/tags/","section":"tags","summary":"Congo has full support for Hugo taxonomies and will adapt to any taxonomy set up.","title":"tags"},{"content":"Underscore _ demisified in Go.\nBlank identifier # The blank identifier is represented by the underscore character _. It serves as an anonymous placeholder instead of a regular (non-blank) identifier and has special meaning in declarations, as an operand, and in assignment statements.\nOfficial Docs:\nThe Go Programming Language Specification Effective Go Why we use it? # As you know, in Golang, every should be used in its declaration scope, But what if you have a variable that is not used, and also irrelevant to you? The compiler will throw an exception, so to Example\nIts also common if you use a function that returns more than one value, and you want to ignore one of the values (commonly to test things out you ignore the error) Underscore will be your friend, and if you want more details.\nThe blank identifier may be used whenever syntax requires a variable name but program logic does not, for instance to discard an unwanted loop index when we require only the element value.\nCopywrite The Go Programming Language (Addison-Wesley Professional Computing Series) Common use case # If you see an import statement with underscore, Jon Explains it here Why we import SQL drivers as the blank identifier\n","date":"23 August 2022","permalink":"/github.io/gobook/blank-identifier/","section":"Blog","summary":"\u003cp\u003eUnderscore _ demisified in Go.\u003c/p\u003e","title":"What is _ (underscore) in Go?"},{"content":"","date":"22 August 2022","permalink":"/github.io/gobook/tags/go/","section":"tags","summary":"","title":"Go"},{"content":"An algorithm is a plan, a set of step-by-step instructions to resolve a problem. And there is two ways to represent that.\nPseudocode # A method of writing up a set of instructions for a computer program using plain English. This is a good way of planning a program before coding.\nPseudocode is a kind of structured english for describing algorithms. It allows the designer to focus on the logic of the algorithm without being distracted by details of language syntax. At the same time, the pseudocode needs to be complete. It describe the entire logic of the algorithm so that implementation becomes a rote mechanical task of translating line by line into source code. In general the vocabulary used in the pseudocode should be the vocabulary of the problem domain, not of the implementation domain. The pseudocode is a narrative for someone who knows the requirements (problem domain) and is trying to learn how the solution is organized. E.g.,\nExtract the next word from the line (good) set word to get next token (poor) Append the file extension to the name (good) name = name + extension (poor)\nFOR all the characters in the name (good) FOR character = first to last (ok)\nSource\nFlow chart # A diagram that shows a process, made up of boxes representing steps, decision, inputs and outputs. of an algorithm\nFlowchart is the second type of representing an algorithm\n","date":"22 August 2022","permalink":"/github.io/gobook/algorithms/","section":"Blog","summary":"\u003cp\u003eAn algorithm is a plan, a set of step-by-step instructions to resolve a problem. And there is two ways to represent that.\u003c/p\u003e","title":"The 2 Algorithms representations"}]